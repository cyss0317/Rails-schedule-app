# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/meetings', type: :request do
  include Devise::Test::IntegrationHelpers
  # This should return the minimal set of attributes required to create a valid
  # Meeting. As you add validations to Meeting, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end
  let(:user) { create(:user) }
  let(:location) { create(:location)}

  before do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Meeting.create! valid_attributes
      get meetings_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      meeting = Meeting.create! valid_attributes
      get meeting_url(meeting)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      @users =  create_list(:user, 4)
      get new_location_meeting_path(location)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      meeting = Meeting.create! valid_attributes
      get edit_meeting_url(meeting)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Meeting' do
        expect do
          post location_meetings_path(location), params: { meeting: valid_attributes }
        end.to change(Meeting, :count).by(1)
      end

      it 'redirects to the created meeting' do
        post location_meetings_path(location), params: { meeting: valid_attributes }
        expect(response).to redirect_to(meeting_url(Meeting.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Meeting' do
        expect do
          post location_meetings_path(location), params: { meeting: invalid_attributes }
        end.to change(Meeting, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post location_meetings_path(location), params: { meeting: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested meeting' do
        meeting = Meeting.create! valid_attributes
        patch meeting_url(meeting), params: { meeting: new_attributes }
        meeting.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the meeting' do
        meeting = Meeting.create! valid_attributes
        patch meeting_url(meeting), params: { meeting: new_attributes }
        meeting.reload
        expect(response).to redirect_to(meeting_url(meeting))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        meeting = Meeting.create! valid_attributes
        patch meeting_url(meeting), params: { meeting: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested meeting' do
      meeting = Meeting.create! valid_attributes
      expect do
        delete meeting_url(meeting)
      end.to change(Meeting, :count).by(-1)
    end

    it 'redirects to the meetings list' do
      meeting = Meeting.create! valid_attributes
      delete meeting_url(meeting)
      expect(response).to redirect_to(meetings_url)
    end
  end

  describe 'POST /seed' do
    xit 'seed the meetings' do
      expect do
        post seed_meetings_url
      end.to change(Meeting, :count)
    end
  end

  describe 'DELETE /clear_selected_week' do
    it 'deletes all the meetings for the week' do
      target_date = Time.zone.parse('2023-01-02 10:00:00')
      meeting = create(:meeting, user_id: user.id, start_time: target_date)
      (1..8).each do |idx|
        create(:meeting, user_id: user.id, start_time: meeting.start_time + idx.day,
                         end_time: meeting.end_time + idx.day, location_id: location.id)
      end

      target_week = %w[2023-01-02
                       2023-01-03
                       2023-01-04
                       2023-01-05
                       2023-01-06
                       2023-01-07
                       2023-01-08]
      expect do
        delete clear_selected_week_location_meetings_path(location), params: { target_week: }
      end.to change(Meeting, :count).by(-7)
    end
  end
end
