quit
@meetings.select { |m| m.start_time.hour < 15 }.class
@meetings.select { |m| m.start_time.hour < 15 }
@meetings.morning_shifts
n
quit
@meetings.morning_shifts
n
nn
quit
c
@meetings[0].start_time.hour
@meetings[0]
self
start_time
@meetings.morning_shifts
@meetings.mroning_shifts
n
c
@meetings.count
@meetings
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.count
c
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
Meeting.delete_all
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
params
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
render action: "weekly"
@meeting
format.html {render :weekly}
render :weekly
format
c
cc
c
self.start_time
self
start_time
c
@meeting
c
c\
c
start_date
params
c
cc
c
@meeting.save!
@meeting.save
c
convert_time(start_date).strftime('%Y-%m-%d').class
convert_time(start_date).strftime('%Y-%m-%d')
convert_time(start_date)
start_date.blank? ? DateTime.now : convert_time(start_date).strftime('%Y-%m-%d')
start_date
c
start_date
c
convert_time(start_date).strftime('%Y-%m-%d')
convert_time(start_date).strftime("%y-%m-%dt%h:%m")
convert_time(start_date).class
convert_time(start_date)
DateTime.parse(start_date)
start_date.class
start_date.blank? ? DateTime.now : convert_time(start_date).strftime("%y-%m-%dt%h:%m")
start_date.blank?
start_date
@meeting
d
c
self.start_time
end_time
start_time
self
c
self
start_time
c
@meeting
c
cc
c
end_time
start_time
c
@meeting
c
cc
c
cc
c
current_user
n
c
current_user.color
current_user
n
c
@meetings.count
@meetings
c
cc
c
@meetings.count
@meetings
c
current_user.color
current_user
n
c
meeting_params[:start_time].class
c
meeting_params[:start_time].class
params[:start_time].class
params[:start_time]
c
params[:start_time]
params | grep start_time
params
c
@meeting[:start_time].class
@meeting
params[:start_time].class
params[:start_time]
params
c
@start_time
params[:start_time].class
params[:start_time]
params
@start_time
n
cn
c
params[:start_time].class
meeting_params[:start_time].class
meeting_params[:start_time]
meeting_params
c
params[:start_time].class
params
c
params[:end_time]
params
params[:end_time]
DateTime.parse(params[:start_time]) > DateTime.parse(params[:end_time])
DateTime.parse(params[:start_time])
require meetings_helper
convert_time(params[:start_time])
params[:start_time].class
params[:start_time]
start_time
c
@start_time
start_time
n
c
params
n
c
@meeting
params
n
c
params
query
n
c
locals
params
n
c
params
n
c
view
self
start_time
params
n
c
params
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
_ Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
@meetings
params
c
@meetings
params
params[:start_time]
params
@end_time
@start_time
Meeting.find_all_by_start_time_and_end_time(start_date_target, end_date_target)
Meeting:Class.instance_methods
Meeting:Class
Meeting:class
Meeting.find_all_by_start_time
Meeting.find_all
Meeting.help
Meeting.class_methods
Meeting.instance_methods
Meeting.methods
start_date_target = params[:start_date].to_date.beginning_of_week
start_date_target = params[:start_date].to_date
end_date_target = params[:start_date].to_date.end_of_week
a = params[:start_date].to_date.end_of_week
a = params[:start_date].to_date.methods
a = params[:start_date].to_date
a = Time.new(params[:start_date])
a = Time.new(params[:start_date]).end_of_week
a = params[:start_date].class
a = params[:start_date].instance_of?
a = params[:start_date].end_of_week
params
@meetings.length
@meetings
n
c
b = Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id)
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id).save
Meeting.count
current_user.id
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id)
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c")
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day)
Time.new.at_midnight
a.instance_methods
a = Time.new
Time.new.instance_methods
Time.new.1.hours_ago
Time.new.1.hour_ago
Time.new.1hour_ago
Meeting.new(start_time: Time.new.yesterday.3.hours_ago, end_time: Time.new.yesterday.1.hours_ago)
Meeting.all.count
@meetings.count
@meetings
n
c
quit
