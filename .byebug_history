c
params[:start_date].to_date.end_of_week.at_end_of_day
params[:start_date].to_date.end_of_week.at_midnight
params[:start_date].to_date.end_of_week.to_time
params[:start_date].to_date.end_of_week.methods
DateTime.now.beginning_of_week
DateTime.now.start_of_week
DateTime.now.end_of_week
params[:start_date].to_date.end_of_week
params[:start_date].to_date
params
c
 Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
c
 Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
c
sorted_events
n
c
date_range
@option
@options
week
day
days
sorted_events
n
c
@options
calendar.options
calendar.sorted_events
calendar.sorted_eventes
calendar.class
Meeting.where(start_time.include?("Sun, 17 Dec 2023"))
Meeting.where(start_time.include?("Sun, 17 Dec 2023")
date_range
calendar.sorted_events
calendar.methods.sort
calendar.methods
sorted_events.each { |k,v| puts v }
sorted_events.class
sorted_events.instance_of?
sorted_events
Meeting.all.sort_by
Meeting.all.sort_by(:start_time)
sorted_events
calendar.events
calendar
event
week[6]
week
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
n
c
day
c
quit
c
day.sunday?
day.methods
day.date
day.day
day
quit
<%= 'today' if day.today? %>
'today' if day.today?
 <h4 class="<%= "today" if day.today? %>"><%= "#{day.mday}" %></h4> today' if day.today?
day.today?
n
quit
c
day.today?
day.today
day.methods.sort
day.methods
day
n
c
(current == key.to_s).to_sc
(current == key.to_s).to_s.to_b
(current == key.to_s).to_s
current == key.to_s
n
c
current == key.to_s
key.to_s
current
n
c
dc
c
val
k
n
c
k
v
n
c
c\
options.each { |k,v| puts v}
options.each { |k,v| put k,v}
options
v
k
n
c
k.to_s
k
n
c
n
c
number_month_to_string(params[:start_date].to_date.mon)
n
c
Date.MONTHNAMES[11]
params[:start_date].to_date.mon
params[:start_date].to_date.methods
params[:start_date].to_date
DateTime.new(params[:start_date])
Time.new(params[:start_date])
params[:start_date]
parmas[:start_date]
date_range.class
date_range
params
locals
calendar.methods
n
calendar.to_json
calendar.methods
calendar
n
c
day.mday
day.to_date
day.methods
day.date
day
n
c
reload!
meeting.start_time
meeting.start_time.localtime
meeting.start_time.methods
meeting.start_time.strftime
meeting.start_time
n
c
week
n
quit
cc
c
sorted_events.fetch(day, [])
sorted_event.fetch(day, [])
day
n
day
c
day
n
c
cc
c
n
c
@meetings
n
quit
sorted_events[day]
sorted_events.pluck(:start_time)
sorted_events
day
n
c
day
n
c
day
n
c
day
sorted_events
sorted_events.fetch(day, [])
n
c
@meetings
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
 start_time.hour <= hour && hour <= end_time.hour Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
@end_time
@start_time
start_time
quit
c
sorted_events.fetch(day, [])
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time.count
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
c
quit
end_time
14 <= end_time
true && false
end_time
start_time
start_time <= 14 && 14 <= end_time
start_time <= 14 && 14 <= end_time.hour
 start_time.hour <= hour && hour <= end_time.hour
end_time = meeting.end_time.hour
start_time <= 14
start_time = meeting.start_time.hour
quit
meeting.start_time.hour <= 14
c
quit
meeting.end_time.hour
meeting.end_time.hour >= 9
 meeting.start_time.hour <= 9
 start_time.hour <= 9
