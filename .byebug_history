quit
start_time.hour <= hour || end_time.hour <= hour ? true : false
end_time.hour <=  hour
hour
start_time.hour <= hour || end_time.hour > hour ? true : false
self
start_time.hour
end_time.hour
start_time.hour >= hour
start_time.hour <= hour
passed_block.call day, sorted_events.fetch(day, [])  start_time.
hour
start_time.hour
quit
c
event.shift_belongs_to_hour?(0)
event.shift_belongs_to_hour?(23)
n
quit
event.start_time.hour
event.shift_belongs_to_hour?(23)
event.shift_belongs_to_hour?(time)
event.shift_belongs_to_hour?(hour)
event.shift_belongs_to_hour?
self
n
quit
event.start_time.methods
day.to_s
DateTime.new(day.to_s)
DateTime.new("#{day}")
DateTime.attr
DateTime.methods
DateTime.new(date: day)
day
DateTime.new(day)
DateTime.new
DateTime.new(day, time)
DateTime
Time
TimeWithZone
TimeWithZone.new
day
event.start_time.class
start_time.class
Time.new(time)
event.start_time.hour.between?(23, event.end_time.hour)
event.start_time.hour
event.end_time.hour
event.start_time.hour.between?(time, event.end_time.hour)
time.class
event.start_time
time
idx
n
quit
i
ni
n
nn
n
quit
c
quit
c
(passed_block.call day, sorted_events.fetch(day, [])).html
(passed_block.call day, sorted_events.fetch(day, [])).to_html
(passed_block.call day, sorted_events.fetch(day, []))
passed_block.call day, sorted_events.fetch(day, [])
 <%= passed_block.call day, sorted_events.fetch(day, []) %>
sorted_events.fetch(day, [])
day
passed_block
n
quit
@meetings.select { |m| m.start_time.hour < 15 }.class
@meetings.select { |m| m.start_time.hour < 15 }
@meetings.morning_shifts
n
quit
@meetings.morning_shifts
n
nn
quit
c
@meetings[0].start_time.hour
@meetings[0]
self
start_time
@meetings.morning_shifts
@meetings.mroning_shifts
n
c
@meetings.count
@meetings
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.count
c
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
Meeting.delete_all
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
params
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
render action: "weekly"
@meeting
format.html {render :weekly}
render :weekly
format
c
cc
c
self.start_time
self
start_time
c
@meeting
c
c\
c
start_date
params
c
cc
c
@meeting.save!
@meeting.save
c
convert_time(start_date).strftime('%Y-%m-%d').class
convert_time(start_date).strftime('%Y-%m-%d')
convert_time(start_date)
start_date.blank? ? DateTime.now : convert_time(start_date).strftime('%Y-%m-%d')
start_date
c
start_date
c
convert_time(start_date).strftime('%Y-%m-%d')
convert_time(start_date).strftime("%y-%m-%dt%h:%m")
convert_time(start_date).class
convert_time(start_date)
DateTime.parse(start_date)
start_date.class
start_date.blank? ? DateTime.now : convert_time(start_date).strftime("%y-%m-%dt%h:%m")
start_date.blank?
start_date
@meeting
d
c
self.start_time
end_time
start_time
self
c
self
start_time
c
@meeting
c
cc
c
end_time
start_time
c
@meeting
c
cc
c
cc
c
current_user
n
c
current_user.color
current_user
n
c
@meetings.count
@meetings
c
cc
c
@meetings.count
@meetings
c
current_user.color
current_user
n
c
meeting_params[:start_time].class
c
meeting_params[:start_time].class
params[:start_time].class
params[:start_time]
c
params[:start_time]
params | grep start_time
params
c
@meeting[:start_time].class
@meeting
params[:start_time].class
params[:start_time]
params
c
@start_time
params[:start_time].class
params[:start_time]
params
@start_time
n
cn
c
params[:start_time].class
meeting_params[:start_time].class
meeting_params[:start_time]
meeting_params
c
params[:start_time].class
params
c
params[:end_time]
params
params[:end_time]
DateTime.parse(params[:start_time]) > DateTime.parse(params[:end_time])
DateTime.parse(params[:start_time])
require meetings_helper
convert_time(params[:start_time])
params[:start_time].class
params[:start_time]
start_time
c
@start_time
start_time
n
c
params
n
c
@meeting
params
n
c
params
query
n
c
locals
params
n
c
