c
reload!
meeting.start_time
meeting.start_time.localtime
meeting.start_time.methods
meeting.start_time.strftime
meeting.start_time
n
c
week
n
quit
cc
c
sorted_events.fetch(day, [])
sorted_event.fetch(day, [])
day
n
day
c
day
n
c
cc
c
n
c
@meetings
n
quit
sorted_events[day]
sorted_events.pluck(:start_time)
sorted_events
day
n
c
day
n
c
day
n
c
day
sorted_events
sorted_events.fetch(day, [])
n
c
@meetings
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
 start_time.hour <= hour && hour <= end_time.hour Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
@end_time
@start_time
start_time
quit
c
sorted_events.fetch(day, [])
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time.count
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).sort_by_start_time
c
quit
end_time
14 <= end_time
true && false
end_time
start_time
start_time <= 14 && 14 <= end_time
start_time <= 14 && 14 <= end_time.hour
 start_time.hour <= hour && hour <= end_time.hour
end_time = meeting.end_time.hour
start_time <= 14
start_time = meeting.start_time.hour
quit
meeting.start_time.hour <= 14
c
quit
meeting.end_time.hour
meeting.end_time.hour >= 9
 meeting.start_time.hour <= 9
 start_time.hour <= 9
 start_time.hour <= hour
quit
meeting.start_time.hour <= 15/Users/yunchoi/.vscode/extensions/mateuszdrewniak.ruby-test-runner-0.3.7/print_and_save bundle exec rspec /Users/yunchoi/Documents/Git_repositories/rails-schedule-app/spec/models/meeting_spec.rb:47
6
meeting.start_time.hour <= 15
meeting.start_time.hour <= 14
meeting.start_time.hour <= 10
meeting.start_time.hour <= 9
meeting.start_time.hour <= 109
meeting.start_time.hour <= 10
meeting.start_time.hour <= 11
meeting.start_time.hour <= 12
meeting.end_time.hour >= 12
meeting.end_time.hour >= 13
meeting.end_time.hour >= 14
meeting.end_time.hour <= 14
meeting.end_time.hour <= 13
meeting.end_time.hour <= 12
meeting.end_time.hour
meeting.start_time.hour
quit
/Users/yunchoi/.vscode/extensions/mateuszdrewniak.ruby-test-runner-0.3.7/print_and_save bundle exec rspec /Users/yunchoi/Documents/Git_repositories/rails-schedule-app/spec/models/meeting_spec.rb:22
self.start_time
Meeting.where("#{start_time.hour} < ?", '15:00')
Meeting.where( where("#{start_time.hour} < ?", '15:00'))
Meeting.where(start_time.hour < 15)
Meeting.morning_shifts
Meeting.all.pluck(:start_time)[0].hour
Meeting.all.pluck(:start_time)
Meeting.all
Meeting.morning_shifts
quit
start_time.hour <= hour || end_time.hour <= hour ? true : false
end_time.hour <=  hour
hour
start_time.hour <= hour || end_time.hour > hour ? true : false
self
start_time.hour
end_time.hour
start_time.hour >= hour
start_time.hour <= hour
passed_block.call day, sorted_events.fetch(day, [])  start_time.
hour
start_time.hour
quit
c
event.shift_belongs_to_hour?(0)
event.shift_belongs_to_hour?(23)
n
quit
event.start_time.hour
event.shift_belongs_to_hour?(23)
event.shift_belongs_to_hour?(time)
event.shift_belongs_to_hour?(hour)
event.shift_belongs_to_hour?
self
n
quit
event.start_time.methods
day.to_s
DateTime.new(day.to_s)
DateTime.new("#{day}")
DateTime.attr
DateTime.methods
DateTime.new(date: day)
day
DateTime.new(day)
DateTime.new
DateTime.new(day, time)
DateTime
Time
TimeWithZone
TimeWithZone.new
day
event.start_time.class
start_time.class
Time.new(time)
event.start_time.hour.between?(23, event.end_time.hour)
event.start_time.hour
event.end_time.hour
event.start_time.hour.between?(time, event.end_time.hour)
time.class
event.start_time
time
idx
n
quit
i
ni
n
nn
n
quit
c
quit
c
(passed_block.call day, sorted_events.fetch(day, [])).html
(passed_block.call day, sorted_events.fetch(day, [])).to_html
(passed_block.call day, sorted_events.fetch(day, []))
passed_block.call day, sorted_events.fetch(day, [])
 <%= passed_block.call day, sorted_events.fetch(day, []) %>
sorted_events.fetch(day, [])
day
passed_block
n
quit
@meetings.select { |m| m.start_time.hour < 15 }.class
@meetings.select { |m| m.start_time.hour < 15 }
@meetings.morning_shifts
n
quit
@meetings.morning_shifts
n
nn
quit
c
@meetings[0].start_time.hour
@meetings[0]
self
start_time
@meetings.morning_shifts
@meetings.mroning_shifts
n
c
@meetings.count
@meetings
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.count
c
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
Meeting.delete_all
Meeting.count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
c
params
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
render action: "weekly"
@meeting
format.html {render :weekly}
render :weekly
format
c
cc
c
self.start_time
self
start_time
c
@meeting
c
c\
c
start_date
params
c
cc
c
@meeting.save!
@meeting.save
c
convert_time(start_date).strftime('%Y-%m-%d').class
convert_time(start_date).strftime('%Y-%m-%d')
convert_time(start_date)
start_date.blank? ? DateTime.now : convert_time(start_date).strftime('%Y-%m-%d')
start_date
c
