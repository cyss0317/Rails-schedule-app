c
continue
next
day_events
day_event
day
n
next
c
Meeting.where(start_time: .cstart_with("2023-11-21"))
start_time
Meeting.where(start_time.start_with("2023-11-21"))
)
Meeting.where(start_time.start_with("2023-11-21")
@meetings
day_events
n
c
Meeting.default
.simple-calendar {
  tr#weekly {
    .day {
      height: 100dvh;
    }
  }
}
 Meeting.default
c
start_time.usec > end_time.usec
start_time > end_time
c
continue
quit
start_time > end_time
tart_time.usec > end_time.usec
   51:   end start_time.usec > end_time.usec
end_time.class
start_time.class
quit
start_time.class
start_time
end_time.in_time_zone
start_time.in_time_zone
DateTime.instance_methods
end_time.at_beginning_of_quarter at_beginning_of_hour
end_time.pretty_print_inspect
end_time.end_minute
end_time.end_minutes
end_time.sec_fraction < start_time.sec_fraction
end_time.sec_fraction
start_time.sec_fraction
DateTime.instance_methods.sort
DateTime.instance_methods
start_time.remove_sec
end_time.utc
start_time.utc
start_time.utc.to_i > end_time.utc.to_i
start_time.utc > end_time.utc
start_time.utc
start_time.zone
end_time.zone
start_time.to_s > end_time.to_s
start_time.nsec > end_time.nsec
start_time
end_time
end_time.to_i
start_time.to_i
start_time.instance_methods
start_time.class
end_time.class
end_time.clas
start_time.usec > end_time.usec
continue
Time.now.usec > (Time.now-60.minutes).usec
Time.now.to_f > (Time.now-60.minutes).to_f
Time.now.to_f > (Time.now+1.days).to_f
Time.now.to_i > (Time.now+1.days).to_i
Time.now.to_i > (Time.now-60.minutes).to_i
Time.now.to_i
start_time.class
start_time
Time.new(start_time)
Time.new(start_time) > Time.new(end_time)
Time.new.ctime > (Time.new + 60.minutes)
Time.new.ctime > (Time.new + 60.mintues)
Time.new.ctime > Time.new +60.mintues
Time.new.ctime
Time.new.time
Time.time
Time.new
a.utc
a = Date.new
start_time.utc < end_time.utc
start_time.utc > end_time.utc
start_time.utc
start_time > end_time
end_time
start_time
continue
kill
help
next
skip
@meetings
event
next
skip
quit
@meetings[0].class
@meetings[0].is_a?
@meetings[0].instance_of?
@meetings = Meeting.default
self
def
s
Meeting.where("start_time != nil")
Meeting.where(start_time != nil)
Meeting.where(start_time: nil)
Meeting.default[0]
Meeting.default
skip
Meeting.all
self
Meeting.where(start_time: Date.today)
Date.today
DateTime.now.beginning_of_week
DateTime.now
Meeting.where(start_time: DateTime.now.beginning_of_week)
skip
quit
Meeting.where(start_time: DateTime.now.beginning_of_week, end_time:DateTime.now.end_of_week)
whereami
Meeting.where(start_time: DateTime.now.beginning_of_week, end_time:DateTime.now.end_of_week)
skip
quit
a.month
self
a = SimpleCalendar::WeekCalendar.new(self)
calendar.list
calendar
skip
help
-help
-h
skip
skp
n
nex
next
quit
next
continue
f
