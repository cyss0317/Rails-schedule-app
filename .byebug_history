c
cc
c
current_user
n
c
current_user.color
current_user
n
c
@meetings.count
@meetings
c
cc
c
@meetings.count
@meetings
c
current_user.color
current_user
n
c
meeting_params[:start_time].class
c
meeting_params[:start_time].class
params[:start_time].class
params[:start_time]
c
params[:start_time]
params | grep start_time
params
c
@meeting[:start_time].class
@meeting
params[:start_time].class
params[:start_time]
params
c
@start_time
params[:start_time].class
params[:start_time]
params
@start_time
n
cn
c
params[:start_time].class
meeting_params[:start_time].class
meeting_params[:start_time]
meeting_params
c
params[:start_time].class
params
c
params[:end_time]
params
params[:end_time]
DateTime.parse(params[:start_time]) > DateTime.parse(params[:end_time])
DateTime.parse(params[:start_time])
require meetings_helper
convert_time(params[:start_time])
params[:start_time].class
params[:start_time]
start_time
c
@start_time
start_time
n
c
params
n
c
@meeting
params
n
c
params
query
n
c
locals
params
n
c
params
n
c
view
self
start_time
params
n
c
params
n
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time).count
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
_ Meeting.find_all_by_start_time_and_end_time(@start_time, @end_time)
c
@meetings
params
c
@meetings
params
params[:start_time]
params
@end_time
@start_time
Meeting.find_all_by_start_time_and_end_time(start_date_target, end_date_target)
Meeting:Class.instance_methods
Meeting:Class
Meeting:class
Meeting.find_all_by_start_time
Meeting.find_all
Meeting.help
Meeting.class_methods
Meeting.instance_methods
Meeting.methods
start_date_target = params[:start_date].to_date.beginning_of_week
start_date_target = params[:start_date].to_date
end_date_target = params[:start_date].to_date.end_of_week
a = params[:start_date].to_date.end_of_week
a = params[:start_date].to_date.methods
a = params[:start_date].to_date
a = Time.new(params[:start_date])
a = Time.new(params[:start_date]).end_of_week
a = params[:start_date].class
a = params[:start_date].instance_of?
a = params[:start_date].end_of_week
params
@meetings.length
@meetings
n
c
b = Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id)
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id).save
Meeting.count
current_user.id
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c", user_id: current_user.id)
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day, name: "Made from rails c")
Meeting.new(start_time: Time.new.yesterday.at_midnight, end_time: Time.new.yesterday.end_of_day)
Time.new.at_midnight
a.instance_methods
a = Time.new
Time.new.instance_methods
Time.new.1.hours_ago
Time.new.1.hour_ago
Time.new.1hour_ago
Meeting.new(start_time: Time.new.yesterday.3.hours_ago, end_time: Time.new.yesterday.1.hours_ago)
Meeting.all.count
@meetings.count
@meetings
n
c
quit
Meeting.where(start_time: Time.new.beginning_of_week..Time.new.tomorrow.end_of_week).count
Meeting.where(start_time: Time.new.beginning_of_week..Time.new.tomorrow.end_of_week)
Time.new.beginning_of_week..Time.new.tomorrow.end_of_week
a.date_range
a = SimpleCalendar::WeekCalendar.new(self, options: {start_date: Time.new})
Time.new
Time.new.yesterday
DateTime.new.utc
DateTime.now.utc
DateTime.now
DateTime.new
Date.new()
a.date_range
a = SimpleCalendar::WeekCalendar.new(self, options: {start_date: "2023-10-10"})
calendar
a.params
a
a.start_date
a.date_range
a = SimpleCalendar::WeekCalendar.new(start_date: "2023-10-10")
SimpleCalendar::WeekCalendar.new(start_date: "2023-10-10")
calendar.date_range
params[:start_date]
Meeting.where(start_date: params[:start_date])
Meeting.all
params
calendar.url_for_next_view
calendar.ur_for_next_view
calendar.instance_methods
calendar
n
c
continue
next
day_events
day_event
day
n
next
c
Meeting.where(start_time: .cstart_with("2023-11-21"))
start_time
Meeting.where(start_time.start_with("2023-11-21"))
)
Meeting.where(start_time.start_with("2023-11-21")
@meetings
day_events
n
c
Meeting.default
.simple-calendar {
  tr#weekly {
    .day {
      height: 100dvh;
    }
  }
}
 Meeting.default
c
start_time.usec > end_time.usec
start_time > end_time
c
continue
quit
start_time > end_time
tart_time.usec > end_time.usec
   51:   end start_time.usec > end_time.usec
end_time.class
start_time.class
quit
start_time.class
start_time
end_time.in_time_zone
start_time.in_time_zone
DateTime.instance_methods
end_time.at_beginning_of_quarter at_beginning_of_hour
end_time.pretty_print_inspect
end_time.end_minute
end_time.end_minutes
end_time.sec_fraction < start_time.sec_fraction
end_time.sec_fraction
start_time.sec_fraction
DateTime.instance_methods.sort
DateTime.instance_methods
start_time.remove_sec
end_time.utc
start_time.utc
start_time.utc.to_i > end_time.utc.to_i
start_time.utc > end_time.utc
start_time.utc
start_time.zone
end_time.zone
start_time.to_s > end_time.to_s
start_time.nsec > end_time.nsec
start_time
end_time
end_time.to_i
start_time.to_i
